<?php

namespace PhpParser;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/zend_language_parser.phpy
 *  * the skeleton file grammar/kymacc.php.parser
 *  * the preprocessing script grammar/rebuildParser.php
 */
class Parser extends ParserAbstract
{
    protected $tokenToSymbolMapSize = 389;
    protected $actionTableSize = 1160;
    protected $gotoTableSize = 568;

    protected $invalidSymbol = 154;
    protected $errorSymbol = 1;
    protected $defaultAction = -32766;
    protected $unexpectedTokenRule = 32767;

    protected $YY2TBLSTATE  = 401;
    protected $YYNLSTATES   = 631;

    const YYERRTOK = 256;
    const T_INCLUDE = 257;
    const T_INCLUDE_ONCE = 258;
    const T_EVAL = 259;
    const T_REQUIRE = 260;
    const T_REQUIRE_ONCE = 261;
    const T_LOGICAL_OR = 262;
    const T_LOGICAL_XOR = 263;
    const T_LOGICAL_AND = 264;
    const T_PRINT = 265;
    const T_YIELD = 266;
    const T_PLUS_EQUAL = 267;
    const T_MINUS_EQUAL = 268;
    const T_MUL_EQUAL = 269;
    const T_DIV_EQUAL = 270;
    const T_CONCAT_EQUAL = 271;
    const T_MOD_EQUAL = 272;
    const T_AND_EQUAL = 273;
    const T_OR_EQUAL = 274;
    const T_XOR_EQUAL = 275;
    const T_SL_EQUAL = 276;
    const T_SR_EQUAL = 277;
    const T_POW_EQUAL = 278;
    const T_BOOLEAN_OR = 279;
    const T_BOOLEAN_AND = 280;
    const T_IS_EQUAL = 281;
    const T_IS_NOT_EQUAL = 282;
    const T_IS_IDENTICAL = 283;
    const T_IS_NOT_IDENTICAL = 284;
    const T_IS_SMALLER_OR_EQUAL = 285;
    const T_IS_GREATER_OR_EQUAL = 286;
    const T_SL = 287;
    const T_SR = 288;
    const T_INSTANCEOF = 289;
    const T_INC = 290;
    const T_DEC = 291;
    const T_INT_CAST = 292;
    const T_DOUBLE_CAST = 293;
    const T_STRING_CAST = 294;
    const T_ARRAY_CAST = 295;
    const T_OBJECT_CAST = 296;
    const T_BOOL_CAST = 297;
    const T_UNSET_CAST = 298;
    const T_POW = 299;
    const T_NEW = 300;
    const T_CLONE = 301;
    const T_EXIT = 302;
    const T_IF = 303;
    const T_ELSEIF = 304;
    const T_ELSE = 305;
    const T_ENDIF = 306;
    const T_LNUMBER = 307;
    const T_DNUMBER = 308;
    const T_STRING = 309;
    const T_STRING_VARNAME = 310;
    const T_VARIABLE = 311;
    const T_NUM_STRING = 312;
    const T_INLINE_HTML = 313;
    const T_CHARACTER = 314;
    const T_BAD_CHARACTER = 315;
    const T_ENCAPSED_AND_WHITESPACE = 316;
    const T_CONSTANT_ENCAPSED_STRING = 317;
    const T_ECHO = 318;
    const T_DO = 319;
    const T_WHILE = 320;
    const T_ENDWHILE = 321;
    const T_FOR = 322;
    const T_ENDFOR = 323;
    const T_FOREACH = 324;
    const T_ENDFOREACH = 325;
    const T_DECLARE = 326;
    const T_ENDDECLARE = 327;
    const T_AS = 328;
    const T_SWITCH = 329;
    const T_ENDSWITCH = 330;
    const T_CASE = 331;
    const T_DEFAULT = 332;
    const T_BREAK = 333;
    const T_CONTINUE = 334;
    const T_GOTO = 335;
    const T_FUNCTION = 336;
    const T_CONST = 337;
    const T_RETURN = 338;
    const T_TRY = 339;
    const T_CATCH = 340;
    const T_FINALLY = 341;
    const T_THROW = 342;
    const T_USE = 343;
    const T_INSTEADOF = 344;
    const T_GLOBAL = 345;
    const T_STATIC = 346;
    const T_ABSTRACT = 347;
    const T_FINAL = 348;
    const T_PRIVATE = 349;
    const T_PROTECTED = 350;
    const T_PUBLIC = 351;
    const T_VAR = 352;
    const T_UNSET = 353;
    const T_ISSET = 354;
    const T_EMPTY = 355;
    const T_HALT_COMPILER = 356;
    const T_CLASS = 357;
    const T_TRAIT = 358;
    const T_INTERFACE = 359;
    const T_EXTENDS = 360;
    const T_IMPLEMENTS = 361;
    const T_OBJECT_OPERATOR = 362;
    const T_DOUBLE_ARROW = 363;
    const T_LIST = 364;
    const T_ARRAY = 365;
    const T_CALLABLE = 366;
    const T_CLASS_C = 367;
    const T_TRAIT_C = 368;
    const T_METHOD_C = 369;
    const T_FUNC_C = 370;
    const T_LINE = 371;
    const T_FILE = 372;
    const T_COMMENT = 373;
    const T_DOC_COMMENT = 374;
    const T_OPEN_TAG = 375;
    const T_OPEN_TAG_WITH_ECHO = 376;
    const T_CLOSE_TAG = 377;
    const T_WHITESPACE = 378;
    const T_START_HEREDOC = 379;
    const T_END_HEREDOC = 380;
    const T_DOLLAR_OPEN_CURLY_BRACES = 381;
    const T_CURLY_OPEN = 382;
    const T_PAAMAYIM_NEKUDOTAYIM = 383;
    const T_NAMESPACE = 384;
    const T_NS_C = 385;
    const T_DIR = 386;
    const T_NS_SEPARATOR = 387;
    const T_ELLIPSIS = 388;

    protected $symbolToName = array(
        "EOF",
        "error",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "'?'",
        "':'",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "'&'",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_THROW",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_DOUBLE_ARROW",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "';'",
        "'{'",
        "'}'",
        "'('",
        "')'",
        "'$'",
        "'`'",
        "']'",
        "'\"'"
    );

    protected $tokenToSymbol = array(
            0,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,   49,  153,  154,  150,   48,   32,  154,
          148,  149,   46,   43,    7,   44,   45,   47,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,   27,  145,
           37,   13,   39,   26,   61,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,   63,  154,  152,   31,  154,  151,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  146,   30,  147,   51,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
          154,  154,  154,  154,  154,  154,    1,    2,    3,    4,
            5,    6,    8,    9,   10,   11,   12,   14,   15,   16,
           17,   18,   19,   20,   21,   22,   23,   24,   25,   28,
           29,   33,   34,   35,   36,   38,   40,   41,   42,   50,
           52,   53,   54,   55,   56,   57,   58,   59,   60,   62,
           64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
           74,   75,   76,   77,  154,  154,   78,   79,   80,   81,
           82,   83,   84,   85,   86,   87,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
          132,  133,  134,  154,  154,  154,  154,  154,  154,  135,
          136,  137,  138,  139,  140,  141,  142,  143,  144
    );

    protected $action = array(
          693,   60,   61,  411,   62,   63,-32766,-32766,-32766,-32766,
           64,   65,  216,  217,  218,  219,  220,  221,  222,  223,
          224,  225,  226,  227,  228,  229,  230,  231,  232,  233,
          234,  235,  236,-32766,-32766,-32766,-32766,-32766,-32767,-32767,
        -32767,-32767,   66,   67,   58,  431,  237,  238,   68,    0,
           69,  290,  291,   70,   71,   72,   73,   74,   75,   76,
           77,  370,   33,  300,   78,  403,  412,  446,  348,  349,
          948,  949,  448,  774, 1041,  334,  682,  428,  449,   48,
           27,  413,  281,  450,  554,  451, 1073,  452, 1075, 1074,
          414,-32766,-32766,-32766,   38,   39,  453,  415,  126,   40,
          454, 1035,  410,   79,  134,  321,  351,  352,  552,-32766,
          455,  456,-32766,  407,  457,  458,  459,  132,   -1,  663,
          709,  460,  461,   41,  293,  462,  463,  125,  954,  955,
          956,  957,  951,  952,  307,   83,   84,   85,  436,  476,
          958,  953,  416,  294,  688,  604,  635,   35,  283,  332,
          319,  297,  323,   42, 1041,   86,   87,   88,   89,   90,
           91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
          101,  102,  103,  104,  105,  106,  340,  301,-32766,   32,
         -113, -113, -113,  680,  635,-32766,-32766,-32766,-32766,  107,
          737,-32766,-32766,-32766,  433,-32766,  429,-32766,  358,-32766,
          204, 1070,-32766,-32766,   54,  783,-32766,-32766,-32766,  419,
         1063,-32766,-32766,  476,  899,-32766,  416,  404,-32766,  475,
          339,  455,  456,  318, 1048,  306,-32766,  455,  456,  332,
          663,  709,  460,  461,  294,-32766,  641,  709,  460,  461,
         1007,-32766,-32766,-32766,  915,  462,  899,-32766,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,  129,-32766,-32766,  331,-32766,
          764,-32766,-32766,-32766,-32766,-32766,  295,  130,-32766,-32766,
        -32766,-32766,-32766,-32766,  296,  635,  350,   55,-32766,-32766,
           22,  524,-32766,-32766,-32766, 1004,-32766,  121,-32766,  899,
        -32766,  762,  763,-32766,  213,  214,  215,-32766,-32766,-32766,
          419,-32766,-32766,-32766,  128,  430,-32766,  635,  738,-32766,
          475,-32766,  184, -124,-32766,-32766,-32766,-32766,-32766,  279,
        -32766,  765,-32766,  214,  215,-32766,  231,  232,  233,-32766,
        -32766,-32766,  419,   57,-32766,-32766,  679, 1006,-32766,   37,
          184,-32766,  475, -120,-32766,-32766,  129,-32766,-32766,-32766,
          635,  104,  105,  106,-32766,  301,  899,-32766,-32766,-32766,
          122,-32766,  594,-32766, -119,-32766,-32766,  107,-32766,-32766,
        -32766,-32766,-32766,-32766,-32766,  419,  282,-32766,-32766,-32766,
        -32766,-32766,  616, 1007,-32766,  475,  243,-32766,-32766,-32766,
        -32766,-32766,-32766,  810,  811,  812,  809,  808,  807,  899,
          213,  214,  215,  455,  456, -115, -115, -115,  101,  102,
          103,-32766,  663,  709,  460,  461,  123,  635,  184,  292,
        -32766,-32766,-32766,-32766,-32766,-32766,-32766,  620,-32766,  206,
        -32766,  899,-32766,  628,  207,-32766,  789,  603,  998,-32766,
        -32766,-32766,  419,  242,-32766,-32766,  455,  456,-32766, 1045,
          609,-32766,  475,  419,-32766,  663,  709,  460,  461,-32766,
          635,  215,  205,  503,-32766,  607,  324,-32766,-32766,-32766,
          184,-32766,  435,-32766,  120,-32766,-32766,  184,-32766,  213,
          214,  215,-32766,-32766,-32766,  419,-32766,-32766,-32766,-32766,
        -32766,-32766,  635,  380,-32766,  475,-32766,  184,  419,-32766,
        -32766,-32766,-32766,-32766,  419,-32766,  635,-32766, 1041,  794,
        -32766,-32766,-32766,  560,-32766,-32766,-32766,  419,  626,-32766,
        -32766,  419,  131,-32766,  960,  692,-32766,  475, 1063,-32766,
          237,  238,-32766,-32766,-32766,  635,  419,  425,-32766,-32766,
          606,  925,-32766,-32766,-32766,  130,-32766,  619,-32766,  899,
        -32766,  135,  359,-32766,  438,   28,  133,-32766,-32766,-32766,
          419,  301,-32766,-32766,-32766,-32766,-32766,  443,  567,-32766,
          475,  960,  702,  476,-32766,  107,  416,-32766,  576,  577,
           52,  420,   50,  332,   53,  899, 1005,   43,  108,  109,
          110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
          762,  763,  799,  630,-32766,  788,  625,-32766,-32766,   49,
          635,  941,  642,  611,-32766,   59,   56,-32766,-32766,-32766,
          999,-32766,   51,-32766,  300,-32766,  840,  842,-32766,  213,
          214,  215,-32766,-32766,-32766,  419,  581,-32766,-32766,  578,
        -32766,-32766,  497,  501,-32766,  475,  635,  184,  241,-32766,
        -32766,  514,-32766,-32766,-32766,-32766,  563,-32766,  424,-32766,
          899,-32766,  636,  591,-32766,  652,  635, 1068,-32766,-32766,
        -32766,  419,  654,-32766,-32766,  515,  796,-32766,  496,  602,
        -32766,  475,  676,-32766,  426,-32766, 1063,  593,-32766,-32766,
        -32766,-32766,-32766,-32766,  500, -170,  899,  918, -396,-32766,
        -32766,-32766,-32766,-32766,-32766,-32766,-32766,-32766,-32767,-32767,
        -32767,-32767,  586,  338,  337,-32766,  427, -167,  672,-32766,
          278,  635,  213,  214,  215,-32766,  423,  445,-32766,-32766,
        -32766,  517,-32766,  545,-32766,  299,-32766,  503,  557,-32766,
          184,  570,  419,-32766,-32766,-32766,  419,  572,-32766,-32766,
          711,-32766,-32766, -172,  408,-32766,  475,  635,  330,  710,
          329,-32766,  601,-32766,-32766,-32766,-32766,  425,-32766,  802,
        -32766, -397,-32766,  327, -396,-32766,  333,  322,  599,-32766,
        -32766,-32766,  419,  328,-32766,-32766,  455,  456,-32766,  320,
          462,-32766,  475,-32766,-32766,  663,  709,  460,  461,-32766,
          124,   44,  708,-32766,  959,  310,  373,  704, -295,  635,
           31,  360, -303,-32766,    0,  732,-32766,-32766,-32766, -304,
        -32766,  326,-32766,  740,-32766,  240,  407,-32766,  507,  674,
        -32766,-32766,-32766,-32766,  419,  667,-32766,-32766,  563,  239,
        -32766,  208,  209,-32766,  475,  725,  646,  210,  723,  211,
          721,-32766,-32767,-32767,-32767,-32767,   99,  100,  101,  102,
          103,  202, -105, -105, -105,  648,  208,  209,  684,  948,
          949,  669,  210,-32766,  211,  784,  691,  950,  678,  455,
          456,-32766,-32766,-32766,-32766,-32766,  202,  645,  663,  709,
          460,  461,  585,  792,  948,  949,  681,   46,-32766,  563,
           47,-32766,  950,-32766,-32766,-32766,-32766,-32766,-32767,-32767,
        -32767,-32767,  455,  456,  665,  617,  612, -105,  613,  795,
          793,  663,  709,  460,  461,  542,  647,  954,  955,  956,
          957,  951,  952,  386,  731, -172,  408,  690,  677,  958,
          953,  683,  329,  605,  673,  675,  212,  610,-32766, 1069,
          542,  802,  954,  955,  956,  957,  951,  952,  386, -104,
         -104, -104,  127,  615,  958,  953,   82,  622,  623,  897,
          624,  212,  404,-32766,  627,  629,  455,  456,  318, 1042,
         1040, 1026,  455,  456,  706,  663,  709,  460,  461,  404,
         1036,  641,  709,  460,  461,  318, -172,  408, 1038,  455,
          456,  939,  787,  329,  776, 1046,  455,  456,  641,  709,
          460,  461,  802,  331, -104,  663,  709,  460,  461,  442,
          644, 1071,  455,  456,  234,  235,  236,  730,  729, 1072,
          331,  663,  709,  460,  461,   30,-32766,  643,  455,  456,
          237,  238,  455,  456,  698,  707,  579,  663,  709,  460,
          461,  663,  709,  460,  461,  455,  456,   34,   36,  406,
          664,  455,  456,  402,  663,  709,  460,  461,  335,  592,
          663,  709,  460,  461,  455,  456,  901,   23,  455,  456,
          696,  902,  305,  663,  709,  460,  461,  663,  709,  460,
          461,  455,  456,  800,  878,-32766,-32766,-32766,  304,  705,
          663,  709,  460,  461,-32766,-32766,-32766,  303,  302,  289,
          288,  280,  614,-32766,  203,-32766,  900,  546,   81,   80,
           45,    0,-32766,  964,-32766,-32766,  766, 1020,  907,  903,
          904,    0,  598,  571,  537,  444,  879,  439,  381,  361,
           25,   24, -121, -120,    0,    0,    0,  965, 1067,  938,
         1037, 1021, 1025, 1039,  924,  911,  912,  909,  910,  908
    );

    protected $actionCheck = array(
            1,    2,    3,    4,    5,    6,   28,   29,   30,   31,
           11,   12,   28,   29,   30,   31,   32,   33,   34,   35,
           36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
           46,   47,   48,   28,   29,   30,   31,   32,   33,   34,
           35,   36,   43,   44,   63,    7,   62,   63,   49,    0,
           51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
           61,   75,   63,   64,   65,   66,   67,    7,   98,   99,
           71,   72,   73,   75,   75,    7,   77,   27,   79,   80,
           81,   82,    7,   84,   83,   86,   73,   88,   75,   76,
           91,    8,    9,   10,   95,   96,   97,   98,    7,  100,
          101,   75,    7,  104,  146,  124,  107,  108,  150,   26,
          109,  110,    1,  143,  115,  116,  117,   63,    0,  118,
          119,  120,  121,  137,  138,  126,  127,  146,  129,  130,
          131,  132,  133,  134,  135,    8,    9,   10,    7,  140,
          141,  142,  143,   32,  145,  146,   73,  148,  150,  150,
          151,   32,  153,   26,   75,   28,   29,   30,   31,   32,
           33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
           43,   44,   45,   46,   47,   48,  150,   50,   67,    7,
           68,   69,   70,  145,   73,    8,    9,   10,   77,   62,
           27,   80,   81,   82,   73,   84,  146,   86,    7,   88,
            7,  147,   91,    1,   63,  145,   95,   96,   97,   98,
           78,  100,  101,  140,   12,  104,  143,   99,  107,  108,
           63,  109,  110,  105,  149,    7,  115,  109,  110,  150,
          118,  119,  120,  121,   32,    1,  118,  119,  120,  121,
          119,    8,    9,   10,  149,  126,   12,   28,   29,   30,
            8,    9,   10,    8,    9,  144,  145,  146,  140,   26,
          149,   28,   29,   30,   31,   32,   32,  146,   26,   67,
           28,   29,   30,   31,    7,   73,    7,   63,    1,   77,
          149,  124,   80,   81,   82,  153,   84,  146,   86,   12,
           88,  127,  128,   91,    8,    9,   10,   95,   96,   97,
           98,   67,  100,  101,   27,    7,  104,   73,  145,  107,
          108,   77,   26,  149,   80,   81,   82,  115,   84,  125,
           86,  149,   88,    9,   10,   91,   43,   44,   45,   95,
           96,   97,   98,   63,  100,  101,  145,   73,  104,    7,
           26,  107,  108,  149,   67,    1,  144,  145,  146,  115,
           73,   46,   47,   48,   77,   50,   12,   80,   81,   82,
          146,   84,   73,   86,   70,   88,    8,   62,   91,    8,
            9,   10,   95,   96,   97,   98,   32,  100,  101,  145,
          146,  104,   27,  119,  107,  108,   13,   26,    1,   28,
           29,   30,  115,  108,  109,  110,  111,  112,  113,   12,
            8,    9,   10,  109,  110,   68,   69,   70,   43,   44,
           45,   67,  118,  119,  120,  121,  146,   73,   26,   32,
            1,   77,  145,  146,   80,   81,   82,   27,   84,   13,
           86,   12,   88,   27,   13,   91,  147,   73,  152,   95,
           96,   97,   98,   13,  100,  101,  109,  110,  104,   73,
           27,  107,  108,   98,   67,  118,  119,  120,  121,  115,
           73,   10,   13,    1,   77,   27,   78,   80,   81,   82,
           26,   84,   73,   86,   13,   88,   28,   26,   91,    8,
            9,   10,   95,   96,   97,   98,   67,  100,  101,  145,
          146,  104,   73,   74,  107,  108,   77,   26,   98,   80,
           81,   82,  115,   84,   98,   86,   73,   88,   75,  145,
           91,   28,   29,   78,   95,   96,   97,   98,   27,  100,
          101,   98,  146,  104,  136,   27,  107,  108,   78,   67,
           62,   63,  145,  146,  115,   73,   98,  143,    1,   77,
          146,  108,   80,   81,   82,  146,   84,   27,   86,   12,
           88,   93,   94,   91,   68,   69,   27,   95,   96,   97,
           98,   50,  100,  101,  145,  146,  104,   68,   69,  107,
          108,  136,   32,  140,    1,   62,  143,  115,  102,  103,
           63,  148,   63,  150,   63,   12,  136,   13,   14,   15,
           16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
          127,  128,  145,  146,   67,  145,  146,  145,  146,   63,
           73,  149,  145,  146,   77,   63,   63,   80,   81,   82,
          149,   84,   63,   86,   64,   88,   52,   53,   91,    8,
            9,   10,   95,   96,   97,   98,   70,  100,  101,   75,
           67,  104,   73,   73,  107,  108,   73,   26,   27,    1,
           77,   73,  115,   80,   81,   82,    1,   84,   73,   86,
           12,   88,   73,   73,   91,   73,   73,   73,   95,   96,
           97,   98,   73,  100,  101,   73,   73,  104,   73,   73,
          107,  108,  145,  146,   73,    1,   78,   75,  115,   28,
           29,   30,   31,   32,   75,   75,   12,   75,  124,   28,
           29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
           39,   40,   75,   78,   78,   67,   82,   90,  145,  146,
           90,   73,    8,    9,   10,   77,   98,   98,   80,   81,
           82,   90,   84,   90,   86,   90,   88,    1,   92,   91,
           26,   92,   98,   95,   96,   97,   98,  105,  100,  101,
          119,   67,  104,   98,   99,  107,  108,   73,  106,  119,
          105,   77,   85,  115,   80,   81,   82,  143,   84,  114,
           86,  124,   88,  122,  124,   91,  122,  124,  139,   95,
           96,   97,   98,  123,  100,  101,  109,  110,  104,  124,
          126,  107,  108,  145,  146,  118,  119,  120,  121,  115,
          125,  125,  147,   67,  136,  139,  139,  144,  139,   73,
          148,  139,  139,   77,   -1,  145,   80,   81,   82,  139,
           84,  139,   86,  145,   88,   27,  143,   91,  143,  145,
          146,   95,   96,   97,   98,  145,  100,  101,    1,  125,
          104,   43,   44,  107,  108,  145,  145,   49,  145,   51,
          145,  115,   37,   38,   39,   40,   41,   42,   43,   44,
           45,   63,   92,   93,   94,  145,   43,   44,  145,   71,
           72,  145,   49,   75,   51,  145,  145,   79,  145,  109,
          110,  145,  146,    8,    9,   10,   63,  145,  118,  119,
          120,  121,   89,  145,   71,   72,  145,  145,   75,    1,
          145,   26,   79,   28,   29,   30,   31,   32,   33,   34,
           35,   36,  109,  110,    1,  146,  145,  147,  145,  145,
          145,  118,  119,  120,  121,  127,  145,  129,  130,  131,
          132,  133,  134,  135,  145,   98,   99,  145,  145,  141,
          142,  145,  105,  146,  145,  145,  148,  146,  150,  147,
          127,  114,  129,  130,  131,  132,  133,  134,  135,   92,
           93,   94,  146,  146,  141,  142,  146,  146,  146,  151,
          146,  148,   99,  150,  146,  146,  109,  110,  105,  147,
          147,  147,  109,  110,  147,  118,  119,  120,  121,   99,
          147,  118,  119,  120,  121,  105,   98,   99,  147,  109,
          110,  147,  147,  105,  147,  147,  109,  110,  118,  119,
          120,  121,  114,  140,  147,  118,  119,  120,  121,  147,
          147,  147,  109,  110,   46,   47,   48,  147,  147,  147,
          140,  118,  119,  120,  121,  148,  148,  147,  109,  110,
           62,   63,  109,  110,  147,  147,  152,  118,  119,  120,
          121,  118,  119,  120,  121,  109,  110,  148,  148,  148,
          147,  109,  110,  148,  118,  119,  120,  121,  148,   87,
          118,  119,  120,  121,  109,  110,  147,  149,  109,  110,
          147,  149,  148,  118,  119,  120,  121,  118,  119,  120,
          121,  109,  110,  147,  149,    8,    9,   10,  148,  147,
          118,  119,  120,  121,    8,    9,   10,  148,  148,  148,
          148,  148,  147,   26,  148,   28,  147,  149,  148,  148,
          148,   -1,   26,  149,   28,   29,  149,  152,  149,  149,
          149,   -1,  149,  149,  149,  149,  149,  149,  149,  149,
          149,  149,  149,  149,   -1,   -1,   -1,  152,  152,  152,
          152,  152,  152,  152,  152,  152,  152,  152,  152,  152
    );

    protected $actionBase = array(
            0,  770,  867,  112,  118,  873,  890,  337,  913,  965,
            1,  803,  294,  982,  952,  969,  897,  929,  677,  933,
          946,  423,  355,  400,  406,  400,  438,  644,  644,  644,
          111,  462,  202,  387,  387,  736,  736,  387,  573,  684,
          537,  419,  277,  344,  234,  648,  648,  648,  648,  648,
          648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
          648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
          648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
          648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
          648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
          648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
          648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
          648,  648,  648,  648,  648,  648,  648,  648,  648,  648,
          648,  648,  648,  648,  648,  648,  163,  796,  675,  676,
          799,  800,  793,  792,  932,  630,  987,  802,  832,  529,
          833,  834,  851,  854,  857,  872,  858,  714,  471,  894,
          843,  621,  286,  127,  127,  127,  127,  127,  127,  127,
          127,  127,  127,  392,  392,  127,  392,  392,  392,  392,
          358,  314,  245,  451,  798,  177,  177,  177,  177,  177,
          177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
          177,  444,  823,  823,  823,  823,  823,  823,  823,  823,
          823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
          823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
          823,  823,  823,  823,  823,  823,  823,  823,  823,  823,
          823,  823,  823,  823,   83,   83,  -16,  -16, 1087,  448,
         1096,  483,  361,  219,  242,  -22,  233,  875,  875,  875,
          875,  661,    5,    5,    5,    5,  574,  815,  815,  815,
          815,  671,  671,  671,  671,  655,  898,  837,  119,  119,
          664,  664,  560,  816,  365,  365,  283,  283,  433,  433,
          433,  433,  433,  433,  433,  433,  433,  433,  620,  606,
          888,  888,  164,  164,  164,  164,  473,  388,  450,  132,
          121,  305,  305,  305,  978,  978,  978,  289,  -30,  636,
          376,  376,  376,  635,  668,  608,  399,   73,   73,   73,
           73,  394,  820,   73,   73,   73,  214,  -14,  -14,   13,
          -42,  646,  881,  649,  880,  460,  680,  -19,  683,  683,
          683,   -2,  628,  486,  499,  476,  669,   50,   -2,  163,
          264,  457,  270,  511,  751,  602,  720,  742,  191,   38,
          157,  467,  141,   26,  131,  701,  781,  968,  945,   75,
           54,  647,  511,  511,  511,  172,  435,  141,  194,  468,
          468,  468,  468,  468,  468,  468,  468,  730,   60,   95,
          748,  364,  540,  662,  569,  887,  578,  593,  569,  564,
          540,  910,  910,  910,  910,  540,  593,  887,  887,  540,
          560,  887,  332,  540,  651,  593,  654,  910,  771,  773,
          569,  619,  660,  887,  887,  887,  578,  540,  910,  642,
          663,  193,  887,  910,  642,  540,  564,   49,  498,  546,
          972,  971,  911,  605,  797,  640,  631,  962,  961,  970,
          570,  585,  963,  909,  685,  733,  611,  461,  519,  559,
          517,  521,  666,  553,  665,  628,  624,  513,  513,  513,
          650,  682,  650,  513,  513,  513,  513,  513,  513,  513,
          513, 1007,  667,  673,  653,  634,  731,  449,  685,  641,
          416,  801,  685,  981,  980,  989,  818,  589,  960,  985,
          650, 1006,  752,   91,  421,  959,  643,  592,  650,  950,
          650,  817,  650,  979,  594,  882,  685,  513,  977, 1005,
         1004, 1003, 1002, 1001, 1000,  999,  998,  552,  997,  726,
          988,  218,  966,  669,  672,  599,  723,   68,  996,  650,
          650,  769,  820,  650,  678,  755,  928,  789,  984,  995,
          668,  986,  650,  855,  629,  975,   68,  520,  566,  993,
          670,  821,  915,  822,  637,  974,  920,  824,  430,  874,
          491,  690,  992,  991,  994,  700,  373,  828,  590,  622,
          612,  934,  703,  983,  627,  639,  652,  645,  829,  603,
          990,  705,  774,  775,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,  127,  127,  127,
          127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
          127,  127,  127,  127,  127,  127,  127,  127,  -16,  -16,
          127,  127,  -16,  -16,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  -16,  -16,    0,  -16,  -16,  -16,
          -16,  127,  -16,  127,  -16,  433,  127,  127,  127,  127,
          127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
          127,  127,  -16,  433,  433,  433,  433,  433,  433,  433,
          433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
          433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
          433,  433,  433,  433,  433,  433,  433,  433,  433,  433,
          433,  433,  433,  433,  433,  127,  127,    0,    0,  127,
          -16,  127,  -16,  127,  -16,  127,  -16,  127,  127,  127,
          127,  127,  -16,  -16,  -16,  -16,  -16,    0,  305,  305,
          305,  305,  -16,  -16,  -16,  -16,  285,  285,  285,  433,
          433,  433,  433,  433,  433,  305,  305,  978,  978,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  285,
          285,  433,  433,   73,   73,   73,   73,   73,  -14,  -14,
          -14,   26,    0,    0,    0,    0,    0,    0,   73,  593,
          -14,   79,   79,   79,  -14,  -14,  -14,   26,    0,    0,
            0,    0,  593,   79,    0,    0,    0,  887,    0,    0,
            0,   79,  458,  458,  458,  458,   68,  141,    0,  593,
          593,  593,    0,  619,    0,    0,    0,  887,    0,    0,
            0,    0,    0,    0,  513,   91,  960,  298,  269,    0,
            0,    0,    0,    0,    0,    0,  269,  269,  267,  267,
            0,    0,  552,  513,  513,  513,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,  298,    0,
            0,   68
    );

    protected $actionDefault = array(
            3,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,  423,  423,32767,32767,  380,32767,32767,
        32767,32767,32767,32767,32767,  188,  188,  188,32767,  412,
          412,  412,  412,  412,  412,  412,  412,  412,  412,  412,
        32767,32767,32767,32767,32767,  268,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  274,  428,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  384,32767,32767,
        32767,32767,32767,  249,  250,  252,  253,  187,  413,  138,
          275,  427,  186,   26,  149,  140,   97,  383,  185,  128,
          215,  338,  217,  340,32767,  267,  216,  192,  197,  198,
          199,  200,  201,  202,  203,  204,  205,  206,  207,  208,
          191,  339,  377,  377,  380,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  246,  245,  366,  365,  213,  336,
          214,  337,  218,  341,  220,  343,  219,  236,  237,  234,
          235,  342,  359,  360,  357,  358,  190,  238,  239,  240,
          241,  361,  362,  363,  364,32767,32767,32767,32767,32767,
          422,  422,32767,32767,  227,  228,  350,  351,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,  173,32767,
        32767,32767,  129,  129,  129,  129,  129,32767,32767,32767,
        32767,  222,  223,  221,  345,  346,  344,32767,32767,  312,
        32767,32767,32767,32767,32767,  314,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,  385,  313,32767,32767,
        32767,32767,32767,32767,32767,32767,  398,  301,32767,32767,
        32767,32767,  294,  116,  118,   66,  369,32767,32767,32767,
        32767,32767,  403,  232,32767,32767,32767,32767,32767,32767,
          435,32767,  398,32767,32767,32767,32767,32767,32767,32767,
        32767,  244,  224,  225,  226,32767,32767,  402,  396,  353,
          354,  355,  356,  347,  348,  349,  352,32767,32767,32767,
        32767,32767,   70,  309,32767,  315,32767,32767,32767,32767,
           70,32767,32767,32767,32767,   70,32767,  401,  400,   70,
        32767,  295,  379,   70,   83,32767,   81,32767,  102,  102,
        32767,32767,   85,  375,  391,32767,32767,   70,32767,  283,
           72,  379,32767,32767,  283,   70,32767,32767,    4,  319,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,  296,32767,32767,32767,  264,  265,
          372,  387,32767,  388,32767,  294,32767,  230,  231,  233,
          210,32767,  212,  254,  255,  256,  257,  258,  259,  260,
          262,32767,32767,  299,  302,32767,32767,32767,    6,   20,
          148,32767,  297,32767,32767,  195,32767,32767,32767,32767,
          430,32767,32767,  189,32767,32767,   22,32767,  144,32767,
           68,32767,  420,32767,32767,  396,  298,  229,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  397,32767,32767,
        32767,  123,32767,  332,32767,32767,32767,   84,32767,  193,
          139,32767,32767,  429,32767,32767,32767,32767,32767,32767,
        32767,32767,   69,32767,32767,32767,   86,32767,32767,  396,
        32767,32767,32767,32767,32767,32767,32767,32767,  184,32767,
        32767,32767,32767,32767,  396,32767,  127,32767,32767,32767,
        32767,32767,32767,32767,    4,32767,  166,32767,32767,32767,
        32767,32767,32767,32767,   28,   28,    3,   28,  110,   28,
          151,    3,  102,  102,   63,  151,   28,  151,   28,   28,
           28,   28,   28,   28,   28,  159,   28,   28,   28,   28,
           28
    );

    protected $goto = array(
          169,  144,  169,  139,  139,  144,  144,  139,  140,  141,
          142,  147,  149,  187,  171,  167,  167,  167,  167,  168,
          168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
          163,  164,  165,  166,  185,  138,  477,  478,  363,  479,
          483,  484,  485,  486,  487,  488,  489,  490,  827,  143,
          145,  146,  148,  180,  182,  186,  248,  250,  252,  254,
          256,  257,  258,  259,  260,  267,  268,  269,  270,  284,
          285,  311,  312,  313,  382,  383,  384,  527,  188,  189,
          190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
          200,  150,  151,  152,  170,  153,  172,  154,  244,  175,
          155,  156,  159,  245,  160,  136,  543,  529,  530,  531,
          532,  533,  534,  535,  536,  538,  565,  528,  504,  639,
          639,  639,  504,  504,  543,  543,  543,  543,  543,  543,
          543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
          543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
          543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
          543,  543,  543,  543,  543,  543,  481,  481,  481,  481,
          481,  481,  505,  638,  638,  638,  481,  481,  481,  481,
          481,  481,  481,  481,  481,  481,  555,  582,  492,  492,
          739,  724,  722,  720,  722,  608,  495,  748,  743,  686,
          421,  421,  421,  421,  421,  421,  753,  753, 1052, 1052,
          421,  421,  421,  421,  421,  421,  421,  421,  421,  421,
          342,  768,  926,  926,  761,  761,  761,  761,  761,  640,
          640,  640,  371,  372,  372,  372,  558,  561,  600,  595,
          544,    5,  566,  345,  400,  372,    6,  806,  401,  718,
          718,  718,  718,  387,  523,  713,  719,  590,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
          544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
            9,  325,    3, 1056,   10,  309, 1031, 1031,  516, 1032,
         1032,   11,  364,    1,   12,   13,    2,   14,   15,   16,
          575,    7,   17,   18,   19,   20, 1047, 1047, 1047,  494,
          494,  388,  584,  522,  522,  549,  518,  276, 1030,  277,
          961,  520,  520,  480,  482,  510,  525,  550,  553,  562,
          569,  937,  936,  375,  376, 1012,  493,  493,  961,  961,
          961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
          961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
          961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
          961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
          161, 1024,  583,  343,  344, 1049,  873,  378,  757,  649,
          618,  397,  772,  655,  917,  962,  777,  727, 1009,  825,
          587,  173,  174,  176,  389,  390,  391,  392,  158,  181,
          183,  201,  249,  251,  253,  255,  261,  262,  263,  264,
          265,  271,  272,  273,  274,  286,  287,  314,  315,  316,
          393,  394,  395,  396,  162,  177,  246,  247,  178,  179,
          498,  814,    0,    0,    0,    0,    0,  365,    0,  942,
          947,  508,    0,  498,    0,  519,    0,  882,   26,   21,
          357,    0,  922,  923,    0, 1062, 1062,    0,    0,  440,
          498,  498,  498,  539,    0,    0,    0,  588,  920, 1023,
          920, 1065, 1062,    0,   29,    0,    0,  921,    0,  580,
            0,    0,    0,    0, 1065, 1065,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  498,
            0,    0,    0,    0,    0,    0,    0,  509,  502,    0,
            0,    0,    0,    0,    0,    0,    0,  526
    );

    protected $gotoCheck = array(
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   39,   86,   86,   86,
           86,   86,   86,   86,   86,   86,   86,   26,   26,    7,
            7,    7,   26,   26,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           39,   39,   39,   39,   39,   39,   92,   92,   92,   92,
           92,   92,   77,    6,    6,    6,   92,   92,   92,   92,
           92,   92,   92,   92,   92,   92,   22,   22,   92,   92,
            6,    6,    6,    6,    6,    6,    6,    6,    6,   32,
           39,   39,   39,   39,   39,   39,   55,   55,   55,   55,
           39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
           50,   61,   39,   39,   39,   39,   39,   39,   39,    8,
            8,    8,    5,   99,   99,   99,   42,   42,   42,   39,
           95,    2,   48,   48,   48,   99,    2,   74,   74,   39,
           39,   39,   39,   99,   85,   39,   39,   39,   95,   95,
           95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
           95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
           95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
           95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
           14,  101,   14,  116,   14,  101,   94,   94,    5,   93,
           93,   14,   29,   14,   14,   14,   14,   14,   14,   14,
          104,   14,   14,   14,   14,   14,   94,   94,   94,   98,
           98,   33,   33,   33,   33,   33,   33,   46,   94,   46,
          102,   33,   33,   33,   33,   33,   33,   33,   33,   33,
           33,  100,  100,    9,    9,  108,   95,   95,  102,  102,
          102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
          102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
          102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
          102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
           13,   59,   31,   50,   50,  114,   78,   30,   57,   11,
           52,   10,   62,   12,   90,  103,   63,   49,  107,   77,
           84,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
           13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
            4,   76,   -1,   -1,   -1,   -1,   -1,   40,   -1,   16,
           59,   40,   -1,    4,   -1,   40,   -1,   16,   16,   16,
           16,   -1,   59,   59,   -1,  117,  117,   -1,   -1,   40,
            4,    4,    4,   16,   -1,   -1,   -1,   40,   59,   59,
           59,  117,  117,   -1,   16,   -1,   -1,   59,   -1,   16,
           -1,   -1,   -1,   -1,  117,  117,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    4,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   77,    4,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,    4
    );

    protected $gotoBase = array(
            0,    0, -365,    0,  142,  -99,  169,  115,  225,    5,
            3,   59,  -17,  216, -305,    0,   66,    0,    0,    0,
            0,    0,  140,    0,    0,  -30,   87,    0,    0,  264,
          118,  123,  174,   53,    0,    0,    0,    0,    0,  -78,
           52,    0,  -67,    0,    0,    0, -278,    0,  -86,  -19,
         -209,    0,   51,    0,    0,  -72,    0,  102,    0,   65,
            0,  189,   54,  -15,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,  -51,    0,   15,  137,  105,    0,
            0,    0,    0,    0,  -24,  220,   57,    0,    0,    0,
            4,    0, -112,    9,    6,   56,    0,    0,   29,  -87,
           30,  -18,  156,   55,  117,    0,    0,  -23,  151,    0,
            0,    0,    0,    0,  124,    0,  266,  177,    0
    );

    protected $gotoDefault = array(
        -32768,  447,    4,  633,  464,  499,  660,  661,  662,  367,
          366,  650,  656,  157,    8,  658,  874,  353,  666,  354,
          568,  668,  512,  670,  671,  137,  465,  368,  369,  513,
          377,  556,  685,  266,  374,  687,  355,  689,  695,  356,
          589,  574,  540,  466,  432,  551,  275,  521,  547,  726,
          341,  734,  621,  742,  745,  467,  541,  756,  437,  919,
          385,  767,  773,  778,  781,  409,  398,  564,  785,  786,
          317,  791,  596,  597,  805,  298,  813,  826,  405,  892,
          894,  468,  469,  506,  573,  491,  511,  470,  913,  399,
          916,  471,  472,  417,  418,  934,  931,  347, 1017,  346,
          434,  308, 1002, 1001,  559,  966,  441, 1055, 1013,  336,
          473,  474,  362,  379, 1050,  422, 1057, 1064,  548
    );

    protected $ruleToNonTerminal = array(
            0,    1,    2,    2,    4,    4,    5,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    9,    9,
           11,   11,   11,   11,   10,   10,   12,   14,   14,   15,
           15,   15,   15,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,   36,   36,   38,   37,   37,   30,   30,
           40,   40,   41,   41,    7,    8,    8,    8,   43,   43,
           43,   44,   44,   47,   47,   45,   45,   48,   48,   23,
           23,   32,   32,   35,   35,   34,   34,   49,   24,   24,
           24,   24,   50,   50,   51,   51,   52,   52,   21,   21,
           17,   17,   53,   19,   19,   54,   18,   18,   20,   20,
           31,   31,   31,   42,   42,   56,   56,   57,   57,   58,
           58,   58,   58,   59,   59,   59,   60,   60,   61,   61,
           61,   27,   27,   62,   62,   62,   28,   28,   63,   63,
           46,   46,   64,   64,   64,   64,   64,   69,   69,   70,
           70,   71,   71,   71,   71,   72,   73,   73,   68,   68,
           65,   65,   67,   67,   75,   75,   74,   74,   74,   74,
           74,   74,   66,   66,   76,   76,   29,   29,   22,   22,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
           25,   16,   16,   16,   26,   26,   81,   81,   82,   82,
           82,   82,   77,   84,   84,   89,   89,   90,   91,   91,
           91,   91,   91,   91,   95,   95,   39,   39,   39,   78,
           78,   96,   96,   92,   92,   97,   97,   97,   97,   79,
           79,   79,   83,   83,   83,   88,   88,  102,  102,  102,
          102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
           13,   13,   13,   13,   13,   13,  105,  105,  105,  105,
          105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
          105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
          105,  105,  105,  105,  105,  105,  105,  105,  105,   87,
           87,   80,   80,   80,   80,  103,  103,  104,  104,  107,
          107,  106,  106,  108,  108,   33,   33,   33,   33,  110,
          110,  109,  109,  109,  109,  109,  111,  111,   94,   94,
           98,   98,   93,   93,  112,  112,  112,  112,   99,   99,
           99,   99,   86,   86,  100,  100,  100,   55,  113,  113,
          114,  114,  114,   85,   85,  115,  115,  116,  116,  116,
          116,  101,  101,  101,  101,  117,  117,  117,  117,  117,
          117,  117,  118,  118,  118
    );

    protected $ruleToLength = array(
            1,    1,    2,    0,    1,    3,    1,    1,    1,    1,
            1,    3,    5,    4,    3,    4,    4,    3,    3,    1,
            1,    3,    2,    4,    3,    1,    3,    2,    0,    1,
            1,    1,    1,    3,    3,    5,    8,    3,    5,    9,
            3,    2,    3,    2,    3,    2,    3,    2,    3,    3,
            3,    1,    2,    5,    7,    9,    5,    1,    6,    3,
            3,    2,    1,    0,    2,    8,    0,    4,    1,    3,
            0,    1,    0,    1,    9,    7,    6,    5,    1,    2,
            2,    0,    2,    0,    2,    0,    2,    1,    3,    1,
            4,    1,    4,    1,    4,    1,    3,    3,    3,    4,
            4,    5,    0,    2,    4,    3,    1,    1,    1,    4,
            0,    2,    3,    0,    2,    4,    0,    2,    0,    3,
            1,    2,    1,    1,    0,    1,    3,    4,    6,    0,
            1,    1,    1,    2,    3,    3,    1,    3,    1,    2,
            2,    3,    1,    1,    2,    4,    3,    1,    1,    3,
            2,    0,    3,    3,    8,    3,    2,    1,    3,    0,
            2,    4,    5,    4,    4,    3,    1,    1,    1,    3,
            1,    1,    0,    1,    1,    2,    1,    1,    1,    1,
            1,    1,    1,    3,    1,    3,    3,    1,    0,    1,
            1,    3,    3,    4,    4,    1,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
            2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    1,    3,    5,    4,    4,    4,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
            2,    2,    2,    1,    1,    1,    3,    2,    1,    9,
           10,    3,    3,    3,    2,    4,    4,    3,    4,    4,
            4,    4,    3,    0,    4,    1,    3,    2,    2,    4,
            6,    2,    2,    4,    1,    1,    1,    2,    3,    1,
            1,    1,    1,    1,    1,    3,    3,    4,    4,    0,
            2,    1,    0,    1,    1,    0,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    3,    2,
            1,    3,    1,    4,    3,    1,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    2,    2,    2,    2,    3,    3,    3,
            3,    3,    3,    3,    3,    5,    4,    4,    3,    1,
            3,    1,    1,    3,    3,    1,    1,    0,    2,    0,
            1,    3,    1,    3,    1,    1,    1,    1,    1,    6,
            4,    3,    4,    2,    4,    4,    1,    3,    1,    2,
            1,    1,    4,    1,    3,    6,    4,    4,    4,    4,
            1,    4,    0,    1,    1,    3,    1,    4,    3,    1,
            1,    1,    0,    0,    2,    3,    1,    3,    1,    4,
            2,    2,    2,    1,    2,    1,    4,    3,    3,    3,
            6,    3,    1,    1,    1
    );

    protected function reduceRule0() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule1($attributes) {
         $this->semValue = $this->handleNamespaces($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule2($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule3($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule4($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule5($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule6($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule7($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule8($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule9($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule10($attributes) {
         $this->semValue = new Node\Stmt\HaltCompiler($this->lexer->handleHaltCompiler(), $attributes); 
    }

    protected function reduceRule11($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(3-2)], null, $attributes); 
    }

    protected function reduceRule12($attributes) {
         $this->semValue = new Node\Stmt\Namespace_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule13($attributes) {
         $this->semValue = new Node\Stmt\Namespace_(null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule14($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(3-2)], Node\Stmt\Use_::TYPE_NORMAL, $attributes); 
    }

    protected function reduceRule15($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_FUNCTION, $attributes); 
    }

    protected function reduceRule16($attributes) {
         $this->semValue = new Node\Stmt\Use_($this->semStack[$this->stackPos-(4-3)], Node\Stmt\Use_::TYPE_CONSTANT, $attributes); 
    }

    protected function reduceRule17($attributes) {
         $this->semValue = new Node\Stmt\Const_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule18($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule19($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule20($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(1-1)], null, $attributes); 
    }

    protected function reduceRule21($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule22($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule23($attributes) {
         $this->semValue = new Node\Stmt\UseUse($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule24($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule25($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule26($attributes) {
         $this->semValue = new Node\Const_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule27($attributes) {
         if (is_array($this->semStack[$this->stackPos-(2-2)])) { $this->semValue = array_merge($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); } else { $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; }; 
    }

    protected function reduceRule28($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule29($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule30($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule31($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule32($attributes) {
         throw new Error('__HALT_COMPILER() can only be used from the outermost scope'); 
    }

    protected function reduceRule33($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule34($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule35($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(5-2)], array('stmts' => is_array($this->semStack[$this->stackPos-(5-3)]) ? $this->semStack[$this->stackPos-(5-3)] : array($this->semStack[$this->stackPos-(5-3)]), 'elseifs' => $this->semStack[$this->stackPos-(5-4)], 'else' => $this->semStack[$this->stackPos-(5-5)]), $attributes); 
    }

    protected function reduceRule36($attributes) {
         $this->semValue = new Node\Stmt\If_($this->semStack[$this->stackPos-(8-2)], array('stmts' => $this->semStack[$this->stackPos-(8-4)], 'elseifs' => $this->semStack[$this->stackPos-(8-5)], 'else' => $this->semStack[$this->stackPos-(8-6)]), $attributes); 
    }

    protected function reduceRule37($attributes) {
         $this->semValue = new Node\Stmt\While_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule38($attributes) {
         $this->semValue = new Node\Stmt\Do_($this->semStack[$this->stackPos-(5-4)], is_array($this->semStack[$this->stackPos-(5-2)]) ? $this->semStack[$this->stackPos-(5-2)] : array($this->semStack[$this->stackPos-(5-2)]), $attributes); 
    }

    protected function reduceRule39($attributes) {
         $this->semValue = new Node\Stmt\For_(array('init' => $this->semStack[$this->stackPos-(9-3)], 'cond' => $this->semStack[$this->stackPos-(9-5)], 'loop' => $this->semStack[$this->stackPos-(9-7)], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule40($attributes) {
         $this->semValue = new Node\Stmt\Switch_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule41($attributes) {
         $this->semValue = new Node\Stmt\Break_(null, $attributes); 
    }

    protected function reduceRule42($attributes) {
         $this->semValue = new Node\Stmt\Break_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule43($attributes) {
         $this->semValue = new Node\Stmt\Continue_(null, $attributes); 
    }

    protected function reduceRule44($attributes) {
         $this->semValue = new Node\Stmt\Continue_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule45($attributes) {
         $this->semValue = new Node\Stmt\Return_(null, $attributes); 
    }

    protected function reduceRule46($attributes) {
         $this->semValue = new Node\Stmt\Return_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule47($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule48($attributes) {
         $this->semValue = new Node\Stmt\Global_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule49($attributes) {
         $this->semValue = new Node\Stmt\Static_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule50($attributes) {
         $this->semValue = new Node\Stmt\Echo_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule51($attributes) {
         $this->semValue = new Node\Stmt\InlineHTML($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule52($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule53($attributes) {
         $this->semValue = new Node\Stmt\Unset_($this->semStack[$this->stackPos-(5-3)], $attributes); 
    }

    protected function reduceRule54($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(7-3)], $this->semStack[$this->stackPos-(7-5)][0], array('keyVar' => null, 'byRef' => $this->semStack[$this->stackPos-(7-5)][1], 'stmts' => $this->semStack[$this->stackPos-(7-7)]), $attributes); 
    }

    protected function reduceRule55($attributes) {
         $this->semValue = new Node\Stmt\Foreach_($this->semStack[$this->stackPos-(9-3)], $this->semStack[$this->stackPos-(9-7)][0], array('keyVar' => $this->semStack[$this->stackPos-(9-5)], 'byRef' => $this->semStack[$this->stackPos-(9-7)][1], 'stmts' => $this->semStack[$this->stackPos-(9-9)]), $attributes); 
    }

    protected function reduceRule56($attributes) {
         $this->semValue = new Node\Stmt\Declare_($this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule57($attributes) {
         $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule58($attributes) {
         $this->semValue = new Node\Stmt\TryCatch($this->semStack[$this->stackPos-(6-3)], $this->semStack[$this->stackPos-(6-5)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule59($attributes) {
         $this->semValue = new Node\Stmt\Throw_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule60($attributes) {
         $this->semValue = new Node\Stmt\Goto_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule61($attributes) {
         $this->semValue = new Node\Stmt\Label($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule62($attributes) {
         $this->semValue = array(); /* means: no statement */ 
    }

    protected function reduceRule63($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule64($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule65($attributes) {
         $this->semValue = new Node\Stmt\Catch_($this->semStack[$this->stackPos-(8-3)], substr($this->semStack[$this->stackPos-(8-4)], 1), $this->semStack[$this->stackPos-(8-7)], $attributes); 
    }

    protected function reduceRule66($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule67($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule68($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule69($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule70($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule71($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule72($attributes) {
         $this->semValue = false; 
    }

    protected function reduceRule73($attributes) {
         $this->semValue = true; 
    }

    protected function reduceRule74($attributes) {
         $this->semValue = new Node\Stmt\Function_($this->semStack[$this->stackPos-(9-3)], array('byRef' => $this->semStack[$this->stackPos-(9-2)], 'params' => $this->semStack[$this->stackPos-(9-5)], 'stmts' => $this->semStack[$this->stackPos-(9-8)]), $attributes); 
    }

    protected function reduceRule75($attributes) {
         $this->semValue = new Node\Stmt\Class_($this->semStack[$this->stackPos-(7-2)], array('type' => $this->semStack[$this->stackPos-(7-1)], 'extends' => $this->semStack[$this->stackPos-(7-3)], 'implements' => $this->semStack[$this->stackPos-(7-4)], 'stmts' => $this->semStack[$this->stackPos-(7-6)]), $attributes); 
    }

    protected function reduceRule76($attributes) {
         $this->semValue = new Node\Stmt\Interface_($this->semStack[$this->stackPos-(6-2)], array('extends' => $this->semStack[$this->stackPos-(6-3)], 'stmts' => $this->semStack[$this->stackPos-(6-5)]), $attributes); 
    }

    protected function reduceRule77($attributes) {
         $this->semValue = new Node\Stmt\Trait_($this->semStack[$this->stackPos-(5-2)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule78($attributes) {
         $this->semValue = 0; 
    }

    protected function reduceRule79($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule80($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule81($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule82($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule83($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule84($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule85($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule86($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule87($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule88($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule89($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule90($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule91($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule92($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule93($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule94($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule95($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule96($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule97($attributes) {
         $this->semValue = new Node\Stmt\DeclareDeclare($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule98($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule99($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule100($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule101($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(5-3)]; 
    }

    protected function reduceRule102($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule103($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule104($attributes) {
         $this->semValue = new Node\Stmt\Case_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule105($attributes) {
         $this->semValue = new Node\Stmt\Case_(null, $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule106() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule107() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule108($attributes) {
         $this->semValue = is_array($this->semStack[$this->stackPos-(1-1)]) ? $this->semStack[$this->stackPos-(1-1)] : array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule109($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-2)]; 
    }

    protected function reduceRule110($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule111($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule112($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(3-2)], is_array($this->semStack[$this->stackPos-(3-3)]) ? $this->semStack[$this->stackPos-(3-3)] : array($this->semStack[$this->stackPos-(3-3)]), $attributes); 
    }

    protected function reduceRule113($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule114($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule115($attributes) {
         $this->semValue = new Node\Stmt\ElseIf_($this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule116($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule117($attributes) {
         $this->semValue = new Node\Stmt\Else_(is_array($this->semStack[$this->stackPos-(2-2)]) ? $this->semStack[$this->stackPos-(2-2)] : array($this->semStack[$this->stackPos-(2-2)]), $attributes); 
    }

    protected function reduceRule118($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule119($attributes) {
         $this->semValue = new Node\Stmt\Else_($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule120($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule121($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-2)], true); 
    }

    protected function reduceRule122($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)], false); 
    }

    protected function reduceRule123($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule124($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule125($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule126($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule127($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(4-4)], 1), null, $this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-2)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule128($attributes) {
         $this->semValue = new Node\Param(substr($this->semStack[$this->stackPos-(6-4)], 1), $this->semStack[$this->stackPos-(6-6)], $this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-3)], $attributes); 
    }

    protected function reduceRule129($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule130($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule131($attributes) {
         $this->semValue = 'array'; 
    }

    protected function reduceRule132($attributes) {
         $this->semValue = 'callable'; 
    }

    protected function reduceRule133($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule134($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule135($attributes) {
         $this->semValue = array(new Node\Arg($this->semStack[$this->stackPos-(3-2)], false, false, $attributes)); 
    }

    protected function reduceRule136($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule137($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule138($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(1-1)], false, false, $attributes); 
    }

    protected function reduceRule139($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], true, false, $attributes); 
    }

    protected function reduceRule140($attributes) {
         $this->semValue = new Node\Arg($this->semStack[$this->stackPos-(2-2)], false, true, $attributes); 
    }

    protected function reduceRule141($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule142($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule143($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule144($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule145($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule146($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule147($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule148($attributes) {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function reduceRule149($attributes) {
         $this->semValue = new Node\Stmt\StaticVar(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule150($attributes) {
         if ($this->semStack[$this->stackPos-(2-2)] != null) $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule151($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule152($attributes) {
         $this->semValue = new Node\Stmt\Property($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule153($attributes) {
         $this->semValue = new Node\Stmt\ClassConst($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule154($attributes) {
         $this->semValue = new Node\Stmt\ClassMethod($this->semStack[$this->stackPos-(8-4)], array('type' => $this->semStack[$this->stackPos-(8-1)], 'byRef' => $this->semStack[$this->stackPos-(8-3)], 'params' => $this->semStack[$this->stackPos-(8-6)], 'stmts' => $this->semStack[$this->stackPos-(8-8)]), $attributes); 
    }

    protected function reduceRule155($attributes) {
         $this->semValue = new Node\Stmt\TraitUse($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule156($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule157($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule158($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule159($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule160($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule161($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Precedence($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule162($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(5-1)][0], $this->semStack[$this->stackPos-(5-1)][1], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-4)], $attributes); 
    }

    protected function reduceRule163($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], $this->semStack[$this->stackPos-(4-3)], null, $attributes); 
    }

    protected function reduceRule164($attributes) {
         $this->semValue = new Node\Stmt\TraitUseAdaptation\Alias($this->semStack[$this->stackPos-(4-1)][0], $this->semStack[$this->stackPos-(4-1)][1], null, $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule165($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)]); 
    }

    protected function reduceRule166($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule167($attributes) {
         $this->semValue = array(null, $this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule168($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule169($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule170($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule171($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule172($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule173($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule174($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule175($attributes) {
         Node\Stmt\Class_::verifyModifier($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); $this->semValue = $this->semStack[$this->stackPos-(2-1)] | $this->semStack[$this->stackPos-(2-2)]; 
    }

    protected function reduceRule176($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PUBLIC; 
    }

    protected function reduceRule177($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PROTECTED; 
    }

    protected function reduceRule178($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_PRIVATE; 
    }

    protected function reduceRule179($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_STATIC; 
    }

    protected function reduceRule180($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_ABSTRACT; 
    }

    protected function reduceRule181($attributes) {
         $this->semValue = Node\Stmt\Class_::MODIFIER_FINAL; 
    }

    protected function reduceRule182($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule183($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule184($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(1-1)], 1), null, $attributes); 
    }

    protected function reduceRule185($attributes) {
         $this->semValue = new Node\Stmt\PropertyProperty(substr($this->semStack[$this->stackPos-(3-1)], 1), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule186($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule187($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule188($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule189($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule190($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule191($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule192($attributes) {
         $this->semValue = new Node\Expr\Assign($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule193($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule194($attributes) {
         $this->semValue = new Node\Expr\AssignRef($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule195($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule196($attributes) {
         $this->semValue = new Node\Expr\Clone_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule197($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule198($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule199($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule200($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule201($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule202($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule203($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule204($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule205($attributes) {
         $this->semValue = new Node\Expr\AssignOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule206($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule207($attributes) {
         $this->semValue = new Node\Expr\AssignOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule208($attributes) {
         $this->semValue = new Node\Expr\AssignOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule209($attributes) {
         $this->semValue = new Node\Expr\PostInc($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule210($attributes) {
         $this->semValue = new Node\Expr\PreInc($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule211($attributes) {
         $this->semValue = new Node\Expr\PostDec($this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule212($attributes) {
         $this->semValue = new Node\Expr\PreDec($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule213($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule214($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule215($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule216($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule217($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule218($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule219($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule220($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule221($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule222($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule223($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule224($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule225($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule226($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule227($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule228($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule229($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule230($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule231($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule232($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule233($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule234($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule235($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule236($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule237($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule238($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule239($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule240($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule241($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule242($attributes) {
         $this->semValue = new Node\Expr\Instanceof_($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule243($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule244($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule245($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule246($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule247($attributes) {
         $this->semValue = new Node\Expr\Isset_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule248($attributes) {
         $this->semValue = new Node\Expr\Empty_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule249($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE, $attributes); 
    }

    protected function reduceRule250($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_INCLUDE_ONCE, $attributes); 
    }

    protected function reduceRule251($attributes) {
         $this->semValue = new Node\Expr\Eval_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule252($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE, $attributes); 
    }

    protected function reduceRule253($attributes) {
         $this->semValue = new Node\Expr\Include_($this->semStack[$this->stackPos-(2-2)], Node\Expr\Include_::TYPE_REQUIRE_ONCE, $attributes); 
    }

    protected function reduceRule254($attributes) {
         $this->semValue = new Node\Expr\Cast\Int($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule255($attributes) {
         $this->semValue = new Node\Expr\Cast\Double($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule256($attributes) {
         $this->semValue = new Node\Expr\Cast\String($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule257($attributes) {
         $this->semValue = new Node\Expr\Cast\Array_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule258($attributes) {
         $this->semValue = new Node\Expr\Cast\Object($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule259($attributes) {
         $this->semValue = new Node\Expr\Cast\Bool($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule260($attributes) {
         $this->semValue = new Node\Expr\Cast\Unset_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule261($attributes) {
         $this->semValue = new Node\Expr\Exit_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule262($attributes) {
         $this->semValue = new Node\Expr\ErrorSuppress($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule263($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule264($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule265($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule266($attributes) {
         $this->semValue = new Node\Expr\ShellExec($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule267($attributes) {
         $this->semValue = new Node\Expr\Print_($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule268($attributes) {
         $this->semValue = new Node\Expr\Yield_(null, null, $attributes); 
    }

    protected function reduceRule269($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => false, 'byRef' => $this->semStack[$this->stackPos-(9-2)], 'params' => $this->semStack[$this->stackPos-(9-4)], 'uses' => $this->semStack[$this->stackPos-(9-6)], 'stmts' => $this->semStack[$this->stackPos-(9-8)]), $attributes); 
    }

    protected function reduceRule270($attributes) {
         $this->semValue = new Node\Expr\Closure(array('static' => true, 'byRef' => $this->semStack[$this->stackPos-(10-3)], 'params' => $this->semStack[$this->stackPos-(10-5)], 'uses' => $this->semStack[$this->stackPos-(10-7)], 'stmts' => $this->semStack[$this->stackPos-(10-9)]), $attributes); 
    }

    protected function reduceRule271($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule272($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule273($attributes) {
         $this->semValue = new Node\Expr\Error($attributes); 
    }

    protected function reduceRule274($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(2-2)], null, $attributes); 
    }

    protected function reduceRule275($attributes) {
         $this->semValue = new Node\Expr\Yield_($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-2)], $attributes); 
    }

    protected function reduceRule276($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule277($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule278($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule279($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Scalar\String(Node\Scalar\String::parse($this->semStack[$this->stackPos-(4-1)]), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule280($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule281($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule282($attributes) {
         $this->semValue = new Node\Expr\New_($this->semStack[$this->stackPos-(3-2)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule283($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule284($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(4-3)]; 
    }

    protected function reduceRule285($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule286($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule287($attributes) {
         $this->semValue = new Node\Expr\ClosureUse(substr($this->semStack[$this->stackPos-(2-2)], 1), $this->semStack[$this->stackPos-(2-1)], $attributes); 
    }

    protected function reduceRule288($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule289($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule290($attributes) {
         $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-4)], $this->semStack[$this->stackPos-(6-6)], $attributes); 
    }

    protected function reduceRule291($attributes) {
        
            if ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\StaticPropertyFetch) {
                $this->semValue = new Node\Expr\StaticCall($this->semStack[$this->stackPos-(2-1)]->class, new Node\Expr\Variable($this->semStack[$this->stackPos-(2-1)]->name, $attributes), $this->semStack[$this->stackPos-(2-2)], $attributes);
            } elseif ($this->semStack[$this->stackPos-(2-1)] instanceof Node\Expr\ArrayDimFetch) {
                $tmp = $this->semStack[$this->stackPos-(2-1)];
                while ($tmp->var instanceof Node\Expr\ArrayDimFetch) {
                    $tmp = $tmp->var;
                }

                $this->semValue = new Node\Expr\StaticCall($tmp->var->class, $this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes);
                $tmp->var = new Node\Expr\Variable($tmp->var->name, $attributes);
            } else {
                throw new \Exception;
            }
          
    }

    protected function reduceRule292($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule293($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule294($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule295($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule296($attributes) {
         $this->semValue = new Node\Name($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule297($attributes) {
         $this->semValue = new Node\Name\FullyQualified($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule298($attributes) {
         $this->semValue = new Node\Name\Relative($this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule299($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule300($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule301($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule302($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule303($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule304($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule305($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule306($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule307($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule308($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule309($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule310($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule311($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule312($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule313($attributes) {
         $this->semValue = array(Node\Scalar\String::parseEscapeSequences($this->semStack[$this->stackPos-(1-1)], '`')); 
    }

    protected function reduceRule314($attributes) {
         foreach ($this->semStack[$this->stackPos-(1-1)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, '`'); } }; $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule315($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule316($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule317($attributes) {
         $this->semValue = new Node\Scalar\LNumber(Node\Scalar\LNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule318($attributes) {
         $this->semValue = new Node\Scalar\DNumber(Node\Scalar\DNumber::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule319($attributes) {
         $this->semValue = new Node\Scalar\String(Node\Scalar\String::parse($this->semStack[$this->stackPos-(1-1)]), $attributes); 
    }

    protected function reduceRule320($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Line($attributes); 
    }

    protected function reduceRule321($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\File($attributes); 
    }

    protected function reduceRule322($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Dir($attributes); 
    }

    protected function reduceRule323($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Class_($attributes); 
    }

    protected function reduceRule324($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Trait_($attributes); 
    }

    protected function reduceRule325($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Method($attributes); 
    }

    protected function reduceRule326($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Function_($attributes); 
    }

    protected function reduceRule327($attributes) {
         $this->semValue = new Node\Scalar\MagicConst\Namespace_($attributes); 
    }

    protected function reduceRule328($attributes) {
         $this->semValue = new Node\Scalar\String(Node\Scalar\String::parseDocString($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-2)]), $attributes); 
    }

    protected function reduceRule329($attributes) {
         $this->semValue = new Node\Scalar\String('', $attributes); 
    }

    protected function reduceRule330($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule331($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule332($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule333($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule334($attributes) {
         $this->semValue = new Node\Expr\Array_($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule335($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule336($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule337($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BooleanAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule338($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule339($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule340($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\LogicalXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule341($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseOr($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule342($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseAnd($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule343($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\BitwiseXor($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule344($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Concat($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule345($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Plus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule346($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Minus($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule347($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mul($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule348($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Div($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule349($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Mod($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule350($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftLeft($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule351($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\ShiftRight($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule352($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Pow($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule353($attributes) {
         $this->semValue = new Node\Expr\UnaryPlus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule354($attributes) {
         $this->semValue = new Node\Expr\UnaryMinus($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule355($attributes) {
         $this->semValue = new Node\Expr\BooleanNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule356($attributes) {
         $this->semValue = new Node\Expr\BitwiseNot($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule357($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Identical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule358($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotIdentical($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule359($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Equal($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule360($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\NotEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule361($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Smaller($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule362($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\SmallerOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule363($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\Greater($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule364($attributes) {
         $this->semValue = new Node\Expr\BinaryOp\GreaterOrEqual($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule365($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(5-1)], $this->semStack[$this->stackPos-(5-3)], $this->semStack[$this->stackPos-(5-5)], $attributes); 
    }

    protected function reduceRule366($attributes) {
         $this->semValue = new Node\Expr\Ternary($this->semStack[$this->stackPos-(4-1)], null, $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule367($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule368($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule369($attributes) {
         $this->semValue = new Node\Expr\ConstFetch($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule370($attributes) {
         $this->semValue = new Node\Expr\ClassConstFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule371($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule372($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule373($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, '"'); } }; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule374($attributes) {
         foreach ($this->semStack[$this->stackPos-(3-2)] as &$s) { if (is_string($s)) { $s = Node\Scalar\String::parseEscapeSequences($s, null); } } $s = preg_replace('~(\r\n|\n|\r)$~', '', $s); if ('' === $s) array_pop($this->semStack[$this->stackPos-(3-2)]);; $this->semValue = new Node\Scalar\Encapsed($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule375($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule376($attributes) {
         $this->semValue = 'class'; 
    }

    protected function reduceRule377($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule378($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule379() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule380() {
        $this->semValue = $this->semStack[$this->stackPos];
    }

    protected function reduceRule381($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule382($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule383($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule384($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule385($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule386($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule387($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule388($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule389($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(6-2)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule390($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule391($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch($this->semStack[$this->stackPos-(3-1)], $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule392($attributes) {
         $this->semValue = new Node\Expr\MethodCall($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule393($attributes) {
         $this->semValue = new Node\Expr\FuncCall($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule394($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule395($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule396($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule397($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule398($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule399($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(2-2)], $attributes); 
    }

    protected function reduceRule400($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule401($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule402($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-4)], $attributes); 
    }

    protected function reduceRule403($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule404($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(3-1)], substr($this->semStack[$this->stackPos-(3-3)], 1), $attributes); 
    }

    protected function reduceRule405($attributes) {
         $this->semValue = new Node\Expr\StaticPropertyFetch($this->semStack[$this->stackPos-(6-1)], $this->semStack[$this->stackPos-(6-5)], $attributes); 
    }

    protected function reduceRule406($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule407($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule408($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule409($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch($this->semStack[$this->stackPos-(4-1)], $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule410($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule411($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule412($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule413($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule414($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule415($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule416($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule417($attributes) {
         $this->semValue = new Node\Expr\List_($this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule418($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule419($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule420($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule421($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(1-1)]; 
    }

    protected function reduceRule422($attributes) {
         $this->semValue = null; 
    }

    protected function reduceRule423($attributes) {
         $this->semValue = array(); 
    }

    protected function reduceRule424($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule425($attributes) {
         $this->semStack[$this->stackPos-(3-1)][] = $this->semStack[$this->stackPos-(3-3)]; $this->semValue = $this->semStack[$this->stackPos-(3-1)]; 
    }

    protected function reduceRule426($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule427($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(3-3)], $this->semStack[$this->stackPos-(3-1)], false, $attributes); 
    }

    protected function reduceRule428($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(1-1)], null, false, $attributes); 
    }

    protected function reduceRule429($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(4-4)], $this->semStack[$this->stackPos-(4-1)], true, $attributes); 
    }

    protected function reduceRule430($attributes) {
         $this->semValue = new Node\Expr\ArrayItem($this->semStack[$this->stackPos-(2-2)], null, true, $attributes); 
    }

    protected function reduceRule431($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule432($attributes) {
         $this->semStack[$this->stackPos-(2-1)][] = $this->semStack[$this->stackPos-(2-2)]; $this->semValue = $this->semStack[$this->stackPos-(2-1)]; 
    }

    protected function reduceRule433($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(1-1)]); 
    }

    protected function reduceRule434($attributes) {
         $this->semValue = array($this->semStack[$this->stackPos-(2-1)], $this->semStack[$this->stackPos-(2-2)]); 
    }

    protected function reduceRule435($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }

    protected function reduceRule436($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(4-1)], 1), $attributes), $this->semStack[$this->stackPos-(4-3)], $attributes); 
    }

    protected function reduceRule437($attributes) {
         $this->semValue = new Node\Expr\PropertyFetch(new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(3-1)], 1), $attributes), $this->semStack[$this->stackPos-(3-3)], $attributes); 
    }

    protected function reduceRule438($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule439($attributes) {
         $this->semValue = new Node\Expr\Variable($this->semStack[$this->stackPos-(3-2)], $attributes); 
    }

    protected function reduceRule440($attributes) {
         $this->semValue = new Node\Expr\ArrayDimFetch(new Node\Expr\Variable($this->semStack[$this->stackPos-(6-2)], $attributes), $this->semStack[$this->stackPos-(6-4)], $attributes); 
    }

    protected function reduceRule441($attributes) {
         $this->semValue = $this->semStack[$this->stackPos-(3-2)]; 
    }

    protected function reduceRule442($attributes) {
         $this->semValue = new Node\Scalar\String($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule443($attributes) {
         $this->semValue = new Node\Scalar\String($this->semStack[$this->stackPos-(1-1)], $attributes); 
    }

    protected function reduceRule444($attributes) {
         $this->semValue = new Node\Expr\Variable(substr($this->semStack[$this->stackPos-(1-1)], 1), $attributes); 
    }
}
